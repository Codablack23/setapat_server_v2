import { Repository } from 'typeorm';
import { OrderBriefAttachmentEntity, OrderEntity, OrderResizeExtraEntity, OrderSubmissionEntity } from 'src/entities';
import { OrderStatus, OrderSubmissions } from 'src/lib';
import { ConversationEntity } from 'src/entities/entity.conversations';
import { DesignerProfileEntity } from 'src/entities/entity.designer';
import { OrderEditPageEntity } from 'src/entities/entity.edit_page';
import { MessageEntity } from 'src/entities/entity.messages';
import { NotificationEntity } from 'src/entities/entity.notification';
import { OrderAssignmentEntity } from 'src/entities/entity.order_assignments';
import { OrderEditEntity } from 'src/entities/entity.order_edits';
import { OrderReceiptEntity } from 'src/entities/entity.order_receipts';
import { OrderReviewEntity } from 'src/entities/entity.order_reviews';
import { SubmissionRevisions } from 'src/entities/entity.revisions';
export type OrdersQuery = 'pending' | 'withdrawal';
export declare class DesignerService {
    private readonly orderRepo;
    private readonly orderAssignmentRepo;
    private readonly designerRepo;
    private readonly orderBriefAttachmentRepo;
    private readonly orderResizeExtraRepo;
    private readonly notificationRepo;
    private readonly orderSubmissionRepo;
    private readonly orderReviewRepo;
    private readonly orderReceiptRepo;
    private readonly orderEditRepo;
    private readonly orderEditPageRepo;
    private readonly conversationRepo;
    private readonly messageRepo;
    private readonly submissionRevisionRepo;
    constructor(orderRepo: Repository<OrderEntity>, orderAssignmentRepo: Repository<OrderAssignmentEntity>, designerRepo: Repository<DesignerProfileEntity>, orderBriefAttachmentRepo: Repository<OrderBriefAttachmentEntity>, orderResizeExtraRepo: Repository<OrderResizeExtraEntity>, notificationRepo: Repository<NotificationEntity>, orderSubmissionRepo: Repository<OrderSubmissionEntity>, orderReviewRepo: Repository<OrderReviewEntity>, orderReceiptRepo: Repository<OrderReceiptEntity>, orderEditRepo: Repository<OrderEditEntity>, orderEditPageRepo: Repository<OrderEditPageEntity>, conversationRepo: Repository<ConversationEntity>, messageRepo: Repository<MessageEntity>, submissionRevisionRepo: Repository<SubmissionRevisions>);
    private sortOrders;
    getOrders(userId: string, query?: OrdersQuery): Promise<{
        status: "failed" | "success";
        message: string;
        data: {
            orders: OrderEntity[];
        } | undefined;
    }>;
    getOrder(userId: string, orderId: string): Promise<{
        status: "failed" | "success";
        message: string;
        data: {
            order: {
                pages: import("src/entities").OrderPageEntity[];
                brief_attachments: OrderBriefAttachmentEntity[];
                submissions: OrderSubmissions;
                conversation: ConversationEntity;
                order_edits: OrderEditEntity[];
                discount: import("../entities/entity.discount").DiscountEntity | undefined;
                used_discount: import("../entities/entity.used_discount").UsedDiscountEntity | undefined;
                revisions: SubmissionRevisions[];
                resize_extras: OrderResizeExtraEntity[];
                active_edit: OrderEditEntity | undefined;
                status: OrderStatus;
                last_submitted_at: Date;
                id: string;
                design_class: import("src/lib").DesignClass;
                order_id: string;
                total_revisions: string;
                design_brief: string;
                design_package: import("src/lib").DesignPackage;
                type: import("src/lib").OrderType;
                design_type: string;
                design_assets?: any;
                design_preferences?: any;
                design_samples?: any;
                amount: number;
                delivery_time: number;
                confidential: boolean;
                quick_delivery: boolean;
                delivery_date?: Date;
                started_at?: Date;
                commenced_at?: Date;
                completed_at?: Date;
                last_edited_at?: Date;
                order_assignments: OrderAssignmentEntity[];
                conversations: ConversationEntity[];
                reviews: OrderReviewEntity[];
                receipts: OrderReceiptEntity[];
                notifications: NotificationEntity[];
                user: import("src/entities").UserEntity;
                created_at: Date;
                updated_at: Date;
            };
        } | undefined;
    }>;
    private groupLatestSubmissionsByPage;
}
